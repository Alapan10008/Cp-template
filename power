ll power(ll x, ll y, ll p) {
    ll res = 1;
 
    x = x % p;
 
    while (y > 0) {
        if (y & 1)
            res = (res * x) % p;
 
        y = y >> 1;
        x = (x * x) % p;
    }
    return res;
}
 
 
ll modInverse(ll n, ll p) {
    return power(n, p - 2, p);
}
 
ll ncr(ll n, ll r, ll p) {
    if (n < r)
        return 0;
 
    if (r == 0)
        return 1;
 
    ll fac[n + 1];
    fac[0] = 1;
    for (ll i = 1; i <= n; i++)
        fac[i] = (fac[i - 1] * i) % p;
 
    return (fac[n] * modInverse(fac[r], p) % p * modInverse(fac[n - r], p) % p) % p;
}
 
ll factorial(ll n, ll p) {
    if (p <= n)
        return 0;
 
    ll res = (p - 1);
 
    for (ll i = n + 1; i < p; i++)
        res = (res * modInverse(i, p)) % p;
    return res;
}
